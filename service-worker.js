"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/index.html","c7e9c74640f3be98d6b8c7830f891b35"],["/static/css/main.697dce2f.css","8568b26e09efc7a0dba29319fb291623"],["/static/js/main.a119ab27.js","a4bcfcd30fbe5b6a93619808831f5649"],["/static/media/MenuHeader.6cb9350b.png","6cb9350b2078e8910bc28d73b913f221"],["/static/media/OnyxPathAnarchs.ab609ab5.png","ab609ab53bcca7429ba1dba23a145b5b"],["/static/media/OnyxPathAssamite.435de72e.png","435de72e3d927c13896ff507e9c58c04"],["/static/media/OnyxPathBrujah.2ae49dd0.png","2ae49dd0ccdddb5eb5ad0b535f8bf980"],["/static/media/OnyxPathCamarilla.a25df40f.png","a25df40f728ec1ccb3efd5e6c3a1dadb"],["/static/media/OnyxPathDaughtersofCacophany.df6430a1.png","df6430a1f35f7d9ad3d8acec58727fdf"],["/static/media/OnyxPathGangrel.92a29c28.png","92a29c2836b988505781770a32720148"],["/static/media/OnyxPathGargoyle.06cf5c6f.png","06cf5c6f9a599c03918389470e0f7846"],["/static/media/OnyxPathGiovanni.285c6728.png","285c6728cc48ebea1eaa192ec6437565"],["/static/media/OnyxPathIndependent.de680ca0.png","de680ca0737678eaedae6bafff9dcd4a"],["/static/media/OnyxPathLasombra.749c14b4.png","749c14b4384d18c1f14c597995ac47a4"],["/static/media/OnyxPathNosferatu.59b354a9.png","59b354a9e39b99287b3952b8bb46a776"],["/static/media/OnyxPathSabbat.4e901326.png","4e901326e974ed56aec295c72e33b226"],["/static/media/OnyxPathSetites.cf25ffd3.png","cf25ffd30f06443ecfb1dfe69a105014"],["/static/media/OnyxPathToreador.05f40423.png","05f40423843032191eb9a927fafa4aee"],["/static/media/OnyxPathTremere.74955730.png","749557306471cf8df0c3f1a255fe0baa"],["/static/media/OnyxPathVentrue.5a460e85.png","5a460e85aa04aafb4f58e9f235d40f66"],["/static/media/background.b026e2ef.jpg","b026e2efbc8589f3e6b8f565a202b764"],["/static/media/bookcover.1b82970b.jpg","1b82970bca0404ff4584335654b33952"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,a){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=a),t.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(a){return new Response(a,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,a,t,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(a)+"="+encodeURIComponent(t)),r.toString()},isPathWhitelisted=function(e,a){if(0===e.length)return!0;var t=new URL(a).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return a.every(function(a){return!a.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var a=e[0],t=e[1],n=new URL(a,self.location),r=createCacheKey(n,hashParamName,t,/\.\w{8}\./);return[n.toString(),r]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var n=new Request(t,{credentials:"same-origin"});return fetch(n).then(function(a){if(!a.ok)throw new Error("Request for "+t+" returned a response with status "+a.status);return cleanResponse(a).then(function(a){return e.put(t,a)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(t){return Promise.all(t.map(function(t){if(!a.has(t.url))return e.delete(t)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var a,t=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);(a=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,"index.html"),a=urlsToCacheKeys.has(t));!a&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(t=new URL("/index.html",self.location).toString(),a=urlsToCacheKeys.has(t)),a&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(a){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,a),fetch(e.request)}))}});